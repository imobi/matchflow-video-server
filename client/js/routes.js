/*
Collections.files = new Meteor.Files({
  debug: false,
  throttle: 256 * 256 * 64,
  chunkSize: 256 * 256 * 4,
  storagePath: 'assets/app/uploads/uploadedFiles',
  collectionName: 'uploadedFiles',
  allowClientCode: false,
  onBeforeUpload: function() {
    if (this.size <= 100000 * 10 * 128) {
      return true;
    } else {
      return "Max. file size is 128MB you've tried to upload " + (filesize(this.size));
    }
  },
  downloadCallback: function(fileObj) {
    var ref;
    if (((ref = this.params) != null ? ref.query.download : void 0) === 'true') {
      return Collections.files.collection.update(fileObj._id, {
        $inc: {
          'meta.downloads': 1
        }
      });
    }
  }
});

if (Meteor.isServer) {
  Collections.files.collection.deny({
    insert: function() {
      return true;
    },
    update: function() {
      return true;
    },
    remove: function() {
      return true;
    }
  });
  Collections.files.collection._ensureIndex({
    'meta.expireAt': 1
  }, {
    expireAfterSeconds: 0,
    background: true
  });
  Meteor.startup(function() {
    return Collections.files.remove({});
  });
  Meteor.publish('latest', function(take) {
    if (take == null) {
      take = 50;
    }
    check(take, Number);
    return Collections.files.collection.find({}, {
      limit: take,
      sort: {
        'meta.created_at': -1
      },
      fields: {
        _id: 1,
        name: 1,
        type: 1,
        meta: 1,
        isVideo: 1,
        isAudio: 1,
        isImage: 1
      }
    });
  });
  Meteor.publish('file', function(_id) {
    check(_id, String);
    return Collections.files.collection.find(_id);
  });
  Meteor.methods({
    'filesLenght': function() {
      return Collections.files.collection.find({}).count();
    }
  });
}

// ---
// generated by coffee-script 1.9.2



Router.map(function() {
  this.route('index', {
    fastRender: true,
    template: 'index',
    path: '/',
    waitOn: function() {
      return _app.subs.subscribe('latest', 50);
    }
  });
  return this.route('file', {
    fastRender: true,
    template: 'file',
    path: '/:_id',
    waitOn: function() {
      return _app.subs.subscribe('file', this.params._id);
    },
    data: function() {
      return Collections.files.collection.findOne(this.params._id);
    },
    title: function() {
      var file;
      file = this.data();
      if (this.params._id && file) {
        return "View File: " + file.name;
      }
    }
  });
});

// ---
// generated by coffee-script 1.9.2


Meteor.startup(function() {
  Template.uploadForm.onCreated(function() {
    this.error = new ReactiveVar(false);
    return this.uploadInstance = new ReactiveVar(false);
  });
  Template.uploadForm.helpers({
    error: function() {
      return Template.instance().error.get();
    },
    uploadInstance: function() {
      return Template.instance().uploadInstance.get();
    }
  });
  return Template.uploadForm.events({
    'click #pause': function() {
      return this.pause();
    },
    'click #abort': function() {
      return this.abort();
    },
    'click #continue': function() {
      return this["continue"]();
    },
    'change input[name="userfile"]': function(e, template) {
      return template.$('form#uploadFile').submit();
    },
    'submit form#uploadFile': function(e, template) {
      var created_at, done, files;
      e.preventDefault();
      template.error.set(false);
      files = e.currentTarget.userfile.files;
      if (!files.length) {
        template.error.set("Please select a file to upload");
        return false;
      }
      done = false;
      created_at = +(new Date);
      template.uploadInstance.set(Collections.files.insert({
        file: files[0],
        meta: {
          expireAt: new Date(created_at + _app.storeTTL),
          created_at: created_at,
          downloads: 0
        },
        onUploaded: function(error, fileObj) {
          done = true;
          if (!error) {
            Router.go('file', {
              _id: fileObj._id
            });
          } else {
            template.error.set(error.reason);
          }
          return template.uploadInstance.set(false);
        },
        onAbort: function() {
          done = true;
          return template.uploadInstance.set(false);
        },
        onBeforeUpload: function() {
          if (this.size <= 100000 * 10 * 128) {
            return true;
          } else {
            return "Max. file size is 128MB you've tried to upload " + (filesize(this.size));
          }
        },
        streams: 8
      }));
      return false;
    }
  });
});

// ---
// generated by coffee-script 1.9.2


Meteor.startup(function() {
  Template.index.onCreated(function() {
    this.take = new ReactiveVar(50);
    this.filesLength = new ReactiveVar(0);
    this.getFilesLenght = (function(_this) {
      return function() {
        return Meteor.call('filesLenght', function(error, length) {
          if (error) {
            return console.error(error);
          } else {
            return _this.filesLength.set(length);
          }
        });
      };
    })(this);
    this.getFilesLenght();
    return this.autorun((function(_this) {
      return function() {
        return Meteor.subscribe('latest', _this.take.get());
      };
    })(this));
  });
  Template.index.helpers({
    take: function() {
      return Template.instance().take.get();
    },
    latest: function() {
      return Collections.files.collection.find({}, {
        sort: {
          'meta.created_at': -1
        }
      });
    },
    removedIn: function() {
      return moment(this.meta.expireAt).fromNow();
    },
    filesLength: function() {
      return Template.instance().filesLength.get();
    }
  });
  return Template.index.events({
    'click #loadMore': function(e, template) {
      return template.take.set(template.take.get() + 50);
    }
  });
});

// ---
// generated by coffee-script 1.9.2

this.Collections = {};

this._app = {
  subs: new SubsManager(),
  storeTTL: 259200000
};

if (Meteor.isClient) {
  Template.registerHelper('filesize', function(size) {
    return filesize(size);
  });
}

if (Meteor.isServer) {
  Meteor.setInterval(function() {
    return Collections.files.remove({
      'meta.expireAt': {
        $lte: new Date((+(new Date)) + 60000 * 2)
      }
    });
  }, 60000);
}

// ---
// generated by coffee-script 1.9.2

*/